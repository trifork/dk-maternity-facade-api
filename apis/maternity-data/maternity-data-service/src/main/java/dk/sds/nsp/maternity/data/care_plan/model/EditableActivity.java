/*
 * Care Plan Domain Model
 * Care Plan Domain Model for Maternity Facade API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.sds.nsp.maternity.data.care_plan.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * EditableActivity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-26T12:45:02.145373+01:00[Europe/Copenhagen]")
public class EditableActivity {

  @JsonProperty("practitioner")
  private Practitioner practitioner = null;

  @JsonProperty("location")
  private Location location = null;

  @JsonProperty("gestationWeek")
  private String gestationWeek = null;

  @JsonProperty("plannedTime")
  private Period plannedTime = null;
  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    EXPECTED("expected"),
    PLANNED("planned"),
    FINISHED("finished");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("status")
  private StatusEnum status = null;

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("reference")
  private String reference = null;

  @JsonProperty("goal")
  private Goal goal = null;

  @JsonProperty("code")
  private Code code = null;

  @JsonProperty("kind")
  private String kind = null;
  public EditableActivity practitioner(Practitioner practitioner) {
    this.practitioner = practitioner;
    return this;
  }

  

  /**
  * Get practitioner
  * @return practitioner
  **/
  public Practitioner getPractitioner() {
    return practitioner;
  }
  public void setPractitioner(Practitioner practitioner) {
    this.practitioner = practitioner;
  }
  public EditableActivity location(Location location) {
    this.location = location;
    return this;
  }

  

  /**
  * Get location
  * @return location
  **/
  public Location getLocation() {
    return location;
  }
  public void setLocation(Location location) {
    this.location = location;
  }
  public EditableActivity gestationWeek(String gestationWeek) {
    this.gestationWeek = gestationWeek;
    return this;
  }

  

  /**
  * Get gestationWeek
  * @return gestationWeek
  **/
  public String getGestationWeek() {
    return gestationWeek;
  }
  public void setGestationWeek(String gestationWeek) {
    this.gestationWeek = gestationWeek;
  }
  public EditableActivity plannedTime(Period plannedTime) {
    this.plannedTime = plannedTime;
    return this;
  }

  

  /**
  * Get plannedTime
  * @return plannedTime
  **/
  public Period getPlannedTime() {
    return plannedTime;
  }
  public void setPlannedTime(Period plannedTime) {
    this.plannedTime = plannedTime;
  }
  public EditableActivity status(StatusEnum status) {
    this.status = status;
    return this;
  }

  

  /**
  * Get status
  * @return status
  **/
  public StatusEnum getStatus() {
    return status;
  }
  public void setStatus(StatusEnum status) {
    this.status = status;
  }
  public EditableActivity title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * Get title
  * @return title
  **/
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public EditableActivity description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public EditableActivity reference(String reference) {
    this.reference = reference;
    return this;
  }

  

  /**
  * A pointer to whatever object this activity is related to
  * @return reference
  **/
  public String getReference() {
    return reference;
  }
  public void setReference(String reference) {
    this.reference = reference;
  }
  public EditableActivity goal(Goal goal) {
    this.goal = goal;
    return this;
  }

  

  /**
  * Get goal
  * @return goal
  **/
  public Goal getGoal() {
    return goal;
  }
  public void setGoal(Goal goal) {
    this.goal = goal;
  }
  public EditableActivity code(Code code) {
    this.code = code;
    return this;
  }

  

  /**
  * Get code
  * @return code
  **/
  public Code getCode() {
    return code;
  }
  public void setCode(Code code) {
    this.code = code;
  }
  public EditableActivity kind(String kind) {
    this.kind = kind;
    return this;
  }

  

  /**
  * Get kind
  * @return kind
  **/
  public String getKind() {
    return kind;
  }
  public void setKind(String kind) {
    this.kind = kind;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditableActivity editableActivity = (EditableActivity) o;
    return Objects.equals(this.practitioner, editableActivity.practitioner) &&
        Objects.equals(this.location, editableActivity.location) &&
        Objects.equals(this.gestationWeek, editableActivity.gestationWeek) &&
        Objects.equals(this.plannedTime, editableActivity.plannedTime) &&
        Objects.equals(this.status, editableActivity.status) &&
        Objects.equals(this.title, editableActivity.title) &&
        Objects.equals(this.description, editableActivity.description) &&
        Objects.equals(this.reference, editableActivity.reference) &&
        Objects.equals(this.goal, editableActivity.goal) &&
        Objects.equals(this.code, editableActivity.code) &&
        Objects.equals(this.kind, editableActivity.kind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(practitioner, location, gestationWeek, plannedTime, status, title, description, reference, goal, code, kind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditableActivity {\n");
    
    sb.append("    practitioner: ").append(toIndentedString(practitioner)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    gestationWeek: ").append(toIndentedString(gestationWeek)).append("\n");
    sb.append("    plannedTime: ").append(toIndentedString(plannedTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
