/*
 * Appointment Domain Model
 * Appointment Domain Model for Maternity Facade API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.sds.nsp.maternity.data.appointment.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.Objects;

/**
 * represents the fields users/the frontend can edit. Maybe look here for help with implementation https://www.nspop.dk/display/ESP/Indhold+og+forretningsregler+Aftaleoversigt
 */
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-29T10:55:17.726956+01:00[Europe/Copenhagen]")
public class EditableAppointment {

  @JsonProperty("title")
  private String title = null;

  @JsonProperty("reason")
  private String reason = null;

  @JsonProperty("period")
  private AppointmentPeriod period = null;

  @JsonProperty("repeated")
  private Boolean repeated = null;

  @JsonProperty("location")
  private AppointmentLocation location = null;

  @JsonProperty("responsible")
  private AppointmentResponsible responsible = null;

  @JsonProperty("performer")
  private AppointmentPerformer performer = null;


  /**
  * Get title
  * @return title
  **/
  public EditableAppointment title(String title) {
    this.title = title;
    return this;
  }
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public EditableAppointment reason(String reason) {
    this.reason = reason;
    return this;
  }

  

  /**
  * Get reason
  * @return reason
  **/
  public String getReason() {
    return reason;
  }
  public void setReason(String reason) {
    this.reason = reason;
  }
  public EditableAppointment period(AppointmentPeriod period) {
    this.period = period;
    return this;
  }

  

  /**
  * Get period
  * @return period
  **/
  public AppointmentPeriod getPeriod() {
    return period;
  }
  public void setPeriod(AppointmentPeriod period) {
    this.period = period;
  }
  public EditableAppointment repeated(Boolean repeated) {
    this.repeated = repeated;
    return this;
  }

  

  /**
  * true if this appointment is part of a repeating pattern
  * @return repeated
  **/
  public Boolean isRepeated() {
    return repeated;
  }
  public void setRepeated(Boolean repeated) {
    this.repeated = repeated;
  }
  public EditableAppointment location(AppointmentLocation location) {
    this.location = location;
    return this;
  }

  

  /**
  * Get location
  * @return location
  **/
  public AppointmentLocation getLocation() {
    return location;
  }
  public void setLocation(AppointmentLocation location) {
    this.location = location;
  }
  public EditableAppointment responsible(AppointmentResponsible responsible) {
    this.responsible = responsible;
    return this;
  }

  

  /**
  * Get responsible
  * @return responsible
  **/
  public AppointmentResponsible getResponsible() {
    return responsible;
  }
  public void setResponsible(AppointmentResponsible responsible) {
    this.responsible = responsible;
  }
  public EditableAppointment performer(AppointmentPerformer performer) {
    this.performer = performer;
    return this;
  }

  

  /**
  * Get performer
  * @return performer
  **/
  public AppointmentPerformer getPerformer() {
    return performer;
  }
  public void setPerformer(AppointmentPerformer performer) {
    this.performer = performer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditableAppointment editableAppointment = (EditableAppointment) o;
    return Objects.equals(this.title, editableAppointment.title) &&
        Objects.equals(this.reason, editableAppointment.reason) &&
        Objects.equals(this.period, editableAppointment.period) &&
        Objects.equals(this.repeated, editableAppointment.repeated) &&
        Objects.equals(this.location, editableAppointment.location) &&
        Objects.equals(this.responsible, editableAppointment.responsible) &&
        Objects.equals(this.performer, editableAppointment.performer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, reason, period, repeated, location, responsible, performer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditableAppointment {\n");
    
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    repeated: ").append(toIndentedString(repeated)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    responsible: ").append(toIndentedString(responsible)).append("\n");
    sb.append("    performer: ").append(toIndentedString(performer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
