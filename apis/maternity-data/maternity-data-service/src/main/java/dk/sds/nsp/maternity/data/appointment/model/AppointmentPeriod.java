/*
 * Appointment Domain Model
 * Appointment Domain Model for Maternity Facade API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.sds.nsp.maternity.data.appointment.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;

import java.util.Date;
import java.util.Objects;

/**
 * EditableAppointmentPeriod
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-29T10:55:17.726956+01:00[Europe/Copenhagen]")public class AppointmentPeriod {

  @JsonProperty("start")
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy'T'hh:mm:ss")
  private Date start = null;

  @JsonProperty("end")
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy'T'hh:mm:ss")
  private Date end = null;
  /**
   * decides if the time is fixed (i.e. appointment lasts from start to end), a guide (i.e. we can&#x27;t promise we&#x27;ll show up at that exact time) or an interval (i.e. the appointment will happen some-time with in this interval)
   */
  public enum TypeEnum {
    FIXED("fixed"),
    GUIDE("guide"),
    INTERVAL("interval");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

  }
  @JsonProperty("type")

  private TypeEnum type = null;
  public AppointmentPeriod start(Date start) {
    this.start = start;
    return this;
  }

  

  /**
  * Get start
  * @return start
  **/
  public Date getStart() {
    return start;
  }
  public void setStart(Date start) {
    this.start = start;
  }
  public AppointmentPeriod end(Date end) {
    this.end = end;
    return this;
  }

  

  /**
  * Get end
  * @return end
  **/
  public Date getEnd() {
    return end;
  }
  public void setEnd(Date end) {
    this.end = end;
  }
  public AppointmentPeriod type(TypeEnum type) {
    this.type = type;
    return this;
  }

  

  /**
  * decides if the time is fixed (i.e. appointment lasts from start to end), a guide (i.e. we can&#x27;t promise we&#x27;ll show up at that exact time) or an interval (i.e. the appointment will happen some-time with in this interval)
  * @return type
  **/
  public TypeEnum getType() {
    return type;
  }
  public void setType(TypeEnum type) {
    this.type = type;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppointmentPeriod appointmentPeriod = (AppointmentPeriod) o;
    return Objects.equals(this.start, appointmentPeriod.start) &&
        Objects.equals(this.end, appointmentPeriod.end) &&
        Objects.equals(this.type, appointmentPeriod.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, end, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditableAppointmentPeriod {\n");
    
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
