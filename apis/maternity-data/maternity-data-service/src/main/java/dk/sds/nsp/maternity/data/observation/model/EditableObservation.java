/*
 * Observation Domain Model
 * Observation (measurement) Domain Model for Maternity Facade API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package dk.sds.nsp.maternity.data.observation.model;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

/**
 * EditableObservation
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-10-28T12:28:12.986099+01:00[Europe/Copenhagen]")
public class EditableObservation {

  @JsonProperty("dateOfMeasurement")
  @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy'T'hh:mm:ss")
  private Date dateOfMeasurement = null;

  @JsonProperty("values")
  private List<EditableObservationValues> values = null;

  @JsonProperty("measuredBy")
  private String measuredBy = null;

  @JsonProperty("enteredBy")
  private String enteredBy = null;

  @JsonProperty("completed")
  private Boolean completed = null;
  public EditableObservation dateOfMeasurement(Date dateOfMeasurement) {
    this.dateOfMeasurement = dateOfMeasurement;
    return this;
  }

  /**
  * Get dateOfMeasurement
  * @return dateOfMeasurement
  **/
  public Date getDateOfMeasurement() {
    return dateOfMeasurement;
  }
  public void setDateOfMeasurement(Date dateOfMeasurement) {
    this.dateOfMeasurement = dateOfMeasurement;
  }
  public EditableObservation values(List<EditableObservationValues> values) {
    this.values = values;
    return this;
  }

  public EditableObservation addValuesItem(EditableObservationValues valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<EditableObservationValues>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
  * Get values
  * @return values
  **/
  public List<EditableObservationValues> getValues() {
    return values;
  }
  public void setValues(List<EditableObservationValues> values) {
    this.values = values;
  }
  public EditableObservation measuredBy(String measuredBy) {
    this.measuredBy = measuredBy;
    return this;
  }

  

  /**
  * Get measuredBy
  * @return measuredBy
  **/
  public String getMeasuredBy() {
    return measuredBy;
  }
  public void setMeasuredBy(String measuredBy) {
    this.measuredBy = measuredBy;
  }
  public EditableObservation enteredBy(String enteredBy) {
    this.enteredBy = enteredBy;
    return this;
  }

  

  /**
  * Get enteredBy
  * @return enteredBy
  **/
  public String getEnteredBy() {
    return enteredBy;
  }
  public void setEnteredBy(String enteredBy) {
    this.enteredBy = enteredBy;
  }
  public EditableObservation completed(Boolean completed) {
    this.completed = completed;
    return this;
  }

  

  /**
  * Get completed
  * @return completed
  **/
  public Boolean isCompleted() {
    return completed;
  }
  public void setCompleted(Boolean completed) {
    this.completed = completed;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditableObservation editableObservation = (EditableObservation) o;
    return Objects.equals(this.dateOfMeasurement, editableObservation.dateOfMeasurement) &&
        Objects.equals(this.values, editableObservation.values) &&
        Objects.equals(this.measuredBy, editableObservation.measuredBy) &&
        Objects.equals(this.enteredBy, editableObservation.enteredBy) &&
        Objects.equals(this.completed, editableObservation.completed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateOfMeasurement, values, measuredBy, enteredBy, completed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditableObservation {\n");
    
    sb.append("    dateOfMeasurement: ").append(toIndentedString(dateOfMeasurement)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    measuredBy: ").append(toIndentedString(measuredBy)).append("\n");
    sb.append("    enteredBy: ").append(toIndentedString(enteredBy)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
