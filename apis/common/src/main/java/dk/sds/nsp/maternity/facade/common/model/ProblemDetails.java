package dk.sds.nsp.maternity.facade.common.model;

import com.fasterxml.jackson.annotation.JsonProperty;

import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A way to carry machine-readable details of errors in a HTTP response to avoid the need to define new error response formats for HTTP APIs. See [RFC7807](https://tools.ietf.org/rfc/rfc7807.txt)
 */
@Generated("openapi")
public class ProblemDetails {
    @JsonProperty("type")
    private String type = null;

    @JsonProperty("title")
    private String title = null;

    @JsonProperty("status")
    private Integer status = null;

    @JsonProperty("instance")
    private String instance = null;

    @JsonProperty("detail")
    private String detail = null;

    @JsonProperty("debugging")
    private String debugging = null;

    @JsonProperty("invalid-params")
private List<ProblemDetailsInvalidparams> invalidParams = null;

    public ProblemDetails type(String type) {
        this.type = type;
        return this;
    }

    /**
     * A URI reference [RFC3986](https://tools.ietf.org/rfc/rfc3986.txt) that identifies the problem type.
     *
     * @return type
     **/
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public ProblemDetails title(String title) {
        this.title = title;
        return this;
    }

    /**
     * A short, human-readable summary of the problem type.
     *
     * @return title
     **/
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public ProblemDetails status(Integer status) {
        this.status = status;
        return this;
    }

    /**
     * The HTTP status code [([RFC7231], Section 6)](https://tools.ietf.org/rfc/rfc7231.txt#section-6) generated by the origin server for this occurrence of the problem.
     *
     * @return status
     **/
    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }

    public ProblemDetails instance(String instance) {
        this.instance = instance;
        return this;
    }

    /**
     * A URI reference that identifies the specific occurrence of the problem.
     *
     * @return instance
     **/
    public String getInstance() {
        return instance;
    }

    public void setInstance(String instance) {
        this.instance = instance;
    }

    public ProblemDetails detail(String detail) {
        this.detail = detail;
        return this;
    }

    /**
     * A human-readable explanation specific to this occurrence of the problem.
     *
     * @return detail
     **/
    public String getDetail() {
        return detail;
    }

    public void setDetail(String detail) {
        this.detail = detail;
    }

    public ProblemDetails debugging(String debugging) {
        this.debugging = debugging;
        return this;
    }

    /**
     * Debugging information for DEV and QA environments.
     *
     * @return debugging
     **/
    public String getDebugging() {
        return debugging;
    }

    public void setDebugging(String debugging) {
        this.debugging = debugging;
    }

    public ProblemDetails invalidParams(List<ProblemDetailsInvalidparams> invalidParams) {
        this.invalidParams = invalidParams;
        return this;
    }

    public ProblemDetails addInvalidParamsItem(ProblemDetailsInvalidparams invalidParamsItem) {
        if (this.invalidParams == null) {
            this.invalidParams = new ArrayList<ProblemDetailsInvalidparams>();
        }
        this.invalidParams.add(invalidParamsItem);
        return this;
    }

    /**
     * An array of validation errors.
     *
     * @return invalidParams
     **/
public List<ProblemDetailsInvalidparams> getInvalidParams() {
        return invalidParams;
    }

    public void setInvalidParams(List<ProblemDetailsInvalidparams> invalidParams) {
        this.invalidParams = invalidParams;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProblemDetails problemDetails = (ProblemDetails) o;
        return Objects.equals(this.type, problemDetails.type) &&
                Objects.equals(this.title, problemDetails.title) &&
                Objects.equals(this.status, problemDetails.status) &&
                Objects.equals(this.instance, problemDetails.instance) &&
                Objects.equals(this.detail, problemDetails.detail) &&
                Objects.equals(this.debugging, problemDetails.debugging) &&
                Objects.equals(this.invalidParams, problemDetails.invalidParams);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, title, status, instance, detail, debugging, invalidParams);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ProblemDetails {\n");

        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    title: ").append(toIndentedString(title)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
        sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
        sb.append("    debugging: ").append(toIndentedString(debugging)).append("\n");
        sb.append("    invalidParams: ").append(toIndentedString(invalidParams)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public ProblemDetails badRequest() {
        return status(400);
    }

    public ProblemDetails unauthorized() {
        return status(401);
    }

    public ProblemDetails forbidden() {
        return status(403);
    }

    public ProblemDetails notFound() {
        return status(404);
    }

    public ProblemDetails methodNotAllowed() {
        return status(405);
    }

    public ProblemDetails notAcceptable() {
        return status(406);
    }

    public ProblemDetails requestTimeout() {
        return status(408);
    }

    public ProblemDetails conflict() {
        return status(409);
    }

    public ProblemDetails unsupportedMediaType() {
        return status(415);
    }

    public ProblemDetails tooEarly() {
        return status(425);
    }

    public ProblemDetails internalServerError() {
        return status(500);
    }

    public ProblemDetails notImplemented() {
        return status(501);
    }

    public ProblemDetails badGateway() {
        return status(502);
    }

    public ProblemDetails serviceUnavailable() {
        return status(503);
    }

    public ProblemDetails gatewayTimeout() {
        return status(504);
    }

}
